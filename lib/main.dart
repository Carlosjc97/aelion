// lib/main.dart
import 'dart:async';
import 'package:flutter/material.dart';
import 'package:flutter_dotenv/flutter_dotenv.dart';

import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_crashlytics/firebase_crashlytics.dart';

import 'package:flutter_localizations/flutter_localizations.dart';
import 'package:learning_ia/l10n/app_localizations.dart';

import 'package:learning_ia/core/app_colors.dart';
import 'package:learning_ia/core/router.dart' as app;
import 'package:learning_ia/services/progress_service.dart';

// Generated by `flutterfire configure`
import 'firebase_options.dart';

Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();

  await _loadEnv();

  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );

  FlutterError.onError = (FlutterErrorDetails details) {
    FirebaseCrashlytics.instance.recordFlutterError(details);
    FlutterError.presentError(details);
  };

  await ProgressService().init();

  runZonedGuarded<Future<void>>(
    () async {
      runApp(const AelionApp());
    },
    (error, stack) async {
      await FirebaseCrashlytics.instance.recordError(error, stack, fatal: true);
      // ignore: avoid_print
      print('[runZonedGuarded] Uncaught error: $error\n$stack');
    },
  );
}

Future<void> _loadEnv() async {
  try {
    await dotenv.load(fileName: 'env.public');
    debugPrint(
      '[Aelion] Cargado env.public (assets). API_BASE_URL=${dotenv.env['API_BASE_URL']}',
    );
    return;
  } catch (_) {
    // fallback below
  }

  try {
    await dotenv.load(fileName: '.env');
    debugPrint(
      '[Aelion] Cargado .env (filesystem). API_BASE_URL=${dotenv.env['API_BASE_URL']}',
    );
  } catch (_) {
    debugPrint('[Aelion] No se pudo cargar env.public ni .env');
  }
}

class AelionApp extends StatelessWidget {
  const AelionApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      onGenerateTitle: (context) => AppLocalizations.of(context)!.appTitle,
      debugShowCheckedModeBanner: false,
      theme: ThemeData(
        useMaterial3: true,
        colorScheme: const ColorScheme(
          brightness: Brightness.light,
          primary: AppColors.primary,
          onPrimary: AppColors.onPrimary,
          secondary: AppColors.secondary,
          onSecondary: AppColors.onSecondary,
          error: AppColors.error,
          onError: Colors.white,
          surface: AppColors.surface,
          onSurface: AppColors.onSurface,
        ),
        scaffoldBackgroundColor: AppColors.background,
        appBarTheme: const AppBarTheme(
          backgroundColor: AppColors.secondary,
          foregroundColor: AppColors.onSecondary,
          centerTitle: true,
          elevation: 0,
        ),
        textTheme: const TextTheme(
          headlineLarge: TextStyle(fontSize: 28, fontWeight: FontWeight.w800),
          headlineMedium: TextStyle(fontSize: 22, fontWeight: FontWeight.w700),
          titleMedium: TextStyle(fontSize: 16, fontWeight: FontWeight.w600),
          bodyLarge: TextStyle(fontSize: 16, height: 1.35),
          bodyMedium: TextStyle(fontSize: 14, height: 1.35),
          labelLarge: TextStyle(fontSize: 16, fontWeight: FontWeight.w600),
        ).apply(
          bodyColor: AppColors.onSurface,
          displayColor: AppColors.onSurface,
        ),
      ),
      supportedLocales: const [Locale('en'), Locale('es')],
      localizationsDelegates: const [
        AppLocalizations.delegate,
        GlobalMaterialLocalizations.delegate,
        GlobalWidgetsLocalizations.delegate,
        GlobalCupertinoLocalizations.delegate,
      ],
      onGenerateRoute: (settings) => app.AppRouter.onGenerateRoute(settings),
      onUnknownRoute: (settings) => app.AppRouter.onUnknownRoute(settings),
      initialRoute: '/',
    );
  }
}
